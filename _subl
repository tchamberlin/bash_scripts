#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""Wrapper around the sublime_text executable

Provides flags to restart or kill all sublime processes
(on the current host, for the current user)
"""

from __future__ import print_function
import argparse
import getpass
import subprocess
import sys
import time


def kill():
    """Kill Sublime Text for current user"""

    user = getpass.getuser()
    try:
        subprocess.check_call(["pkill", "sublime_text", "-u", user])
    except subprocess.CalledProcessError as error:
        if error.returncode == 1:
            print("No Sublime Text currently running!", file=sys.stderr)
        elif error.returncode == 2:
            print("Syntax error! (see pkill manual)", file=sys.stderr)
        elif error.returncode == 3:
            print("Syntax error! (see pkill manual)", file=sys.stderr)
        else:
            print("Unknown error!", file=sys.stderr)
        raise
    print("Sublime Text has been killed", file=sys.stderr)


def sublime(args):
    """Start Sublime Text with given args"""

    if args:
        args = ["sublime_text"].extend(args)
    else:
        args = ["sublime_text"]

    try:
        subprocess.check_call(args)
    except OSError:
        print("Could not find Sublime Text executable 'sublime_text'! Check your PATH!")
        return False

    return True


def main():
    """Main"""

    args, sublime_args = parse_args()

    if args.kill:
        try:
            kill()
        except subprocess.CalledProcessError as error:
            sys.exit(error)
    elif args.restart:
        try:
            kill()
            time.sleep(1)
        except subprocess.CalledProcessError:
            pass
        if sublime(sublime_args):
            print("Sublime Text has been started", file=sys.stderr)
    elif args.subl_help:
        sublime(["--help"])
    else:
        sublime(sublime_args)


def parse_args():
    """Parse arguments and return"""

    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "-k",
        "--kill",
        action="store_true",
        help="Kill all Sublime Text processes for the current user, on the current host",
    )
    group.add_argument(
        "-r",
        "--restart",
        action="store_true",
        help=(
            "Kill all Sublime Text processes for the current user, on the "
            "current host, then restart"
        ),
    )
    group.add_argument(
        "-H",
        "--subl_help",
        action="store_true",
        help="Show sublime_text help message (instead of this one)",
    )
    args, rest = parser.parse_known_args()

    return args, rest


if __name__ == "__main__":
    main()
