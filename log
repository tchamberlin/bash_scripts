#!/bin/bash

###
# Author: Thomas Chamberlin

# log: Log the given command both to the console and to disk, with separate
# files for stdout and stderr
###

# If we have a failure in our pipe, return the error code for the failed
# command, not of this function
set -o pipefail
# Execute cleanup when program exits, under whatever conditions that may be
trap cleanup EXIT

cleanup() {
    if [ -f "$time_output" ]; then
        rm "$time_output"
    fi
}

alert() {
    # Audibly alert based on the given command and exit code
    if [ $# -ne 2 ]; then
        echo "usage: alert cmd exit_code"
        return 1
    fi
    local cmd; cmd="$1"
    local code; code="$2"

    local success_sound; success_sound=/usr/share/sounds/k3b_success1.wav
    local success_sentence; success_sentence="SUCCESS: logging command: $cmd has completed successfully"
    local failure_sound; failure_sound=/usr/share/sounds/k3b_error1.wav
    local failure_sentence; failure_sentence="FAILURE: logging command: $cmd has failed, you sad, sad little man"

    if [ "$code" -eq 0 ]; then
        local sound; sound=$success_sound
        local sentence; sentence=$success_sentence
    else
        local sound; sound=$failure_sound
        local sentence; sentence=$failure_sentence
    fi

    if [ -f "$sound" ]; then
        if ! lcl paplay $sound; then
            echo "WARNING: Could not play sound $sound on host $(hostname)" >&2
        fi
    else
        echo "WARNING: Could not find sound file $sound" >&2
        return 1
    fi

    # Speak the given sentence on the local/physical computer
    echo "$sentence" | lcl festival --tts
}


# Check that there is at least one argument given
if [[ $# -eq 0 ]]; then
    echo "usage: $(basename "$0") command" >&2
    exit 1
fi

# Get the current time in a pretty format
now=$(date +%Y-%m-%d_%T)

# Create the log directory for our three logfiles (solely to keep things organized)
log_dir="$1__${now}__logs"
if ! mkdir "$log_dir"; then
    echo "ERROR: Could not create log directory; check your permissions to write in $(pwd)" >&2
    exit 1
fi

# Create our log filenames; one each for stdout and stderr, and one for both
stdout_log="$log_dir/stdout.log"
stderr_log="$log_dir/stderr.log"
combined_log="$log_dir/combined.log"

# Create our log files with this line explaining what's going on
echo "---Logging the results of '$ $*' to '$log_dir/{$(basename "$stdout_log"),$(basename "$stderr_log"),$(basename "$combined_log")}'---" \
    | tee "$stdout_log" "$stderr_log" "$combined_log"

# Alright, what's going on here?
# The first line passes every argument that was passed to this function
#   to the `time` command. The `time` command is run by `stdbuf`, which is
#   set here to flush the buffer. Flushing the buffer is important for accurate
#   timestamps, and for the output to be streamed smoothly instead of in
#   buffered chunks. The results of the `awk` command are piped to the tee
#   command, which directs them to the terminal and to the combined
#   logfile.
#
# The second line redirects all output streams to the `awk` command,
#   which prepends the date/time to the line. It then passes that to `tee`,
#   which creates the "combined" output file.
#   The buffer is also flushed using `stdbuf`
#
# The third line redirects stdout `tee` which outputs it to the terminal and
#   to the stdout logfile
#
# The fourth line redirects stderr to `awk`, which colors the output red.
#   The output is then piped to tee, which outputs to the terminal
#   and to the stderr logfile. The buffer is also flushed using `stdbuf`
#
# The end result of all of this is that we can see all output in the
#   terminal (timestamped and with stderr colored red), and we get all of
#   this same output in a combined logfile as well as stdour and stderr
#   in their own respective logfiles. We also get information about
#   how long the process took to complete
time_output="/tmp/$USER/time_output"
stdbuf -oL /usr/bin/time --output="$time_output" --portability -- "$@" \
    &> >(stdbuf -oL awk '{ print strftime("[%Y-%m-%d %H:%M:%S]"), $0 }' | stdbuf -oL tee -a "$combined_log") \
    1> >(stdbuf -oL tee -a "$stdout_log" >&1) \
    2> >(stdbuf -oL awk '{ print "\033[01;31m"$0"\033[0m" }' | stdbuf -oL tee -a "$stderr_log" >&2)
# Save the return value of `time` (which is the return value from the _actual_ command)
cmd_ret_val=$?

echo -e "---\nTiming information:" | tee -a "$stdout_log" "$stderr_log" "$combined_log"
tee -a "$stdout_log" "$stderr_log" "$combined_log" < "$time_output"

# Alert based on the given command and its return code
alert "$1" "$cmd_ret_val"

# Return the value of the user's command
exit $cmd_ret_val
